   120343 ```@meta
   274681 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   482739 ```
     2739 
     3065 # Training a Neural ODE to Model Gravitational Waveforms
      428 
   448508 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5178 
   201913 The code has been minimally adapted from
   322063 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
      113 
   201963 ## Package Imports
   201913 
        0 ````julia
   201874 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        -       OptimizationOptimJL, Printf, Random, SciMLSensitivity
       89 using CairoMakie
      341 
      126 CUDA.allowscalar(false)
        - ````
      187 
      226 ## Define some Utility Functions
      189 
      189 ::: tip
        - 
        - This section can be skipped. It defines functions to simulate the model, however, from a
       74 scientific machine learning perspective, isn't super relevant.
      126 
       63 :::
       63 
       63 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
        - vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
        - Mechanics of Particles and Continua 4.3)
       37 
       89 ````julia
        - function one2two(path, m₁, m₂)
       63     M = m₁ + m₂
       63     r₁ = m₂ / M .* path
        -     r₂ = -m₁ / M .* path
       63     return r₁, r₂
       63 end
        - ````
        - 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
       37 
       50     r = p ./ (1 .+ e .* cos.(χ))
       50     x = r .* cos.(ϕ)
        -     y = r .* sin.(ϕ)
       76 
       63     orbit = vcat(x', y')
        0     return orbit
        0 end
        - ````
        0 
        0 ````
        - soln2orbit (generic function with 2 methods)
       76 ````
        - 
       37 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - begin
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle,
        -         markersize=12, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=450 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAOECAIAAAA+D1+tAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZwU9Zk/8G8dfc/03DMw3LeAKCCKMRqjIHifPzTisTGJ2ZDdJK9E47EmJvtyjVlF1zXrEaOi8YhGDRJFQUTwQBEPEEE5hmNmmPvq6bu6rt8fNdR8q7qnmRmG7m/3fN6vvPIaqovuGovurqee5/s8nK7rBAAAAAAAAIYfPtsHAAAAAAAAANmBgBAAAAAAAGCYQkAIAAAAAAAwTCEgBAAAAAAAGKYQEAIAAAAAAAxTCAgBAAAAAACGKQSEAAAAAAAAwxQCQgAAAAAAgGEKASEAAAAAAMAwhYAQAAAAAABgmEJACAAAAAAAMEwhIAQAAAAAABimEBACAAAAAAAMUwgIAQAAAAAAhikEhAAAAAAAAMMUAkIAAAAAAIBhCgEhAAAAAADAMIWAEAAAAAAAYJhCQAgAAAAAADBMISAEAAAAAAAYphAQAgAAAAAADFMICAEAAAAAAIYpBIQAAAAAAADDFAJCAAAAAACAYQoBIQAAAAAAwDCFgBAAAAAAAGCYQkAIAAAAAAAwTCEgBAAAAAAAGKYQEAIAAAAAAAxTCAgBAAAAAACGKTHbBwAZwnFctg8BAAAAAAAGTNf1Y/fkyBACAAAAAAAMU8gQDi/H9O5Cf0QikY6ODp/PV1ZWlt0jgaMhSVJLS4vL5aqqqsr2scDgKYrS2NgoimJ1dXW2jwWOSl1dHSFk7Nix2T4QOCqNjY2KolRXV4siLs9yWEtLiyRJVVVVLpcr28cCg9fR0RGJRMrKynw+X3aPJANVfsgQAgAAAAAADFMICAEAAAAAAIYpBIQAAAAAAADDFAJCAAAAAACAYQoBIQAAAAAAwDCFgBAAAAAAAGCYQk
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(Xoshiro(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[-0.00022003616; -0.00024938682; -4.156413f-5; 2.8359733f-5; 6.43551f-5; 3.6831625f-5; 6.9611015f-5; -0.00014643896; -4.7732872f-5; -0.0001274153; 1.1340412f-5; -0.00021436688; -1.0641656f-5; -0.00012905577; 5.8733995f-6; 0.00013540461; -0.00010968464; 2.1996975f-5; -0.00015985049; 7.742549f-5; -0.00011360214; 4.4488454f-5; -0.00011604302; -5.7252277f-5; -2.5169516f-5; 8.06262f-5; 0.00024176034; 0.000121318764; -0.0001383054; 9.465806f-5; -3.5145054f-5; 0.00014400037;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[9.992781f-5 5.695654f-5 -1.7234017f-6 -6.765722f-5 -2.600313f-5 0.0001359343 -3.297079f-5 -0.0001367658 0.00017201943 0.0001628852 2.7351598f-5 8.5306696f-5 -6.6081935f-5 3.50837f-5 9.9756835f-5 -7.876875f-5 -0.00018943286 6.902568f-6 -0.000103964456 -8.2468374f-5 -0.00010293164 -0.0001
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - 
        - const nn_model = StatefulLuxLayer(nn, st)
        - ````
        - 
        - ````
        - Lux.StatefulLuxLayer{true, Lux.Chain{@NamedTuple{layer_1::Lux.WrappedFunction{Base.Fix1{typeof(broadcast), typeof(cos)}}, layer_2::Lux.Dense{true, typeof(cos), PartialFunctions.PartialFunction{nothing, nothing, typeof(WeightInitializers.truncated_normal), Tuple{}, @NamedTuple{std::Float64}}, typeof(WeightInitializers.zeros32)}, layer_3::Lux.Dense{true, typeof(cos), PartialFunctions.PartialFunction{nothing, nothing, typeof(WeightInitializers.truncated_normal), Tuple{}, @NamedTuple{std::Float64}}, typeof(WeightInitializers.zeros32)}, layer_4::Lux.Dense{true, typeof(identity), PartialFunctions.PartialFunction{nothing, nothing, typeof(WeightInitializers.truncated_normal), Tuple{}, @NamedTuple{std::Float64}}, typeof(WeightInitializers.zeros32)}}, Nothing}, Nothing, @NamedTuple{layer_1::@NamedTuple{}, layer_2::@NamedTuple{}, layer_3::@NamedTuple{}, layer_4::@NamedTuple{}}}(Chain(), nothing, (layer_1 = NamedTuple(), layer_2 = NamedTuple(), layer_3 = NamedTuple(), layer_4 = NamedTuple()), nothing)
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ nn_model([first(u)], nn_params)
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - begin
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markersize=12,
        -         markeralpha=0.25, alpha=0.5, strokewidth=2)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle,
        -         markersize=12, markeralpha=0.25, alpha=0.5, strokewidth=2)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=450 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAOECAIAAAA+D1+tAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdd3gU1dcH8DuzLZveEwKhQ6jSWxSQJh0iEBQEUVEUf6BUFRVfuggKiKgURQQEkSIgvccCAZEWQksoCaTXzSbZNrPz/jFhdjbZFEp2J5vv53mf97kzezd7fPaXsGfPvedSHMcRAAAAAAAAqH5oRwcAAAAAAAAAjoGEEAAAAAAAoJpCQggAAAAAAFBNISEEAAAAAACoppAQAgAAAAAAVFNICAEAAAAAAKopJIQAAAAAAADVFBJCAAAAAACAagoJIQAAAAAAQDWFhBAAAAAAAKCaQkIIAAAAAABQTSEhBAAAAAAAqKaQEAIAAAAAAFRTSAgBAAAAAACqKSSEAAAAAAAA1RQSQgAAAAAAgGoKCSEAAAAAAEA1hYQQAAAAAACgmkJCCAAAAAAAUE0hIQQAAAAAAKimkBACAAAAAABUU0gIAQAAAAAAqikkhAAAAAAAANUUEkIAAAAAAIBqCgkhAAAAAABANYWEEAAAAAAAoJpCQggAAAAAAFBNISEEAAAAAACoppAQAgAAAAAAVFNICAEAAAAAAKopuaMDADuhKMrRIQAAAAAAwCPjOK7yfjgqhAAAAAAAANUUKoTVS6V+u1ARBQUFWVlZbm5ufn5+jo0EnoTBYEhLS1OpVEFBQY6OBR4fwzDJyclyuTwkJMTRscATSUxMJITUrl3b0YHAE0lOTmYYJiQkRC7Hx7MqLC0tzWAwBAUFqVQqR8cCjy8rK6ugoMDPz8/Nzc2xkdhhlR8qhAAAAAAAANUUEkIAAAAAAIBqCgkhAAAAAABANYWEEAAAAAAAoJpCQggAAAAAAFBNISEEAAAAAACoppAQAgAAAAAAVFNICAEAAA
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.17238242282467833, [-0.024250504000091704, -0.023466511886247852, -0.022682519772403903, -0.021357853933783266, -0.0194648437037277, -0.016963325812166214, -0.013800574329610172, -0.00990834608192062, -0.005205150805050734, 0.000404096032171595, 0.007018883877793589, 0.014722220555580423, 0.02353318605066699, 0.03327900468185969, 0.04331790998721411, 0.051883998331854836, 0.0547012793643649, 0.0427191162604648, 0.002408081734656447, -0.06577979040644794, -0.11027814512659653, -0.07676487898499547, -0.0072158988701609165, 0.03870646222835237, 0.05430563681809777, 0.053010130185105274, 0.04488690448894025, 0.034843795891450834, 0.024933654778180974, 0.015920188809885154, 0.008018937953562729, 0.0012286387889183753, -0.004531824574512896, -0.009363874858457341, -0.013366005884337296, -0.016622597652113075, -0.0192053782668293, -0.021170404084204085, -0.022560256697172695, -0.02340495624764215, -0.023722955100162754, -0.023521506369641905, -0.022797953616759997, -0.021537422465715675, -0.019714945334616436, -
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     @printf "Training %10s Iteration: %5d %10s Loss: %.10f\n" "" length(losses) "" l
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [-0.0002200361632274719; -0.00024938682327029903; -4.156412978768841e-5; 2.8359732823427816e-5; 6.435510294975578e-5; 3.683162503875098e-5; 6.96110146235911e-5; -0.00014643896429306931; -4.7732872189936745e-5; -0.00012741530372273682; 1.1340412129341577e-5; -0.00021436688257358468; -1.064165644492043e-5; -0.0001290557702304226; 5.873399459225394e-6; 0.00013540461077332966; -0.00010968463902810504; 2.199697519242421e-5; -0.0001598504895809077; 7.742548768872935e-5; -0.00011360213829885101; 4.448845356823307e-5; -0.00011604301835190614; -5.725227674702157e-5; -2.516951644792005e-5; 8.062620327098596e-5; 0.00024176033912201548; 0.00012131876428606218; -0.00013830540410686367; 9.465806215299967e-5; -3.5145054425770446e-5; 0.00014400036889125948;;], bias = [-1.7872622936792817e-16; -1.908984162889386e-16; -4.708791231384849e-17; 2.0620423441527952e-17; 2.1386824264931482e-17; 8.60655138968298e-18; 8.026356990441399e-17; -3.0283474865889176e-16; 
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - begin
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=4, alpha=0.75)
        -     scatter!(ax, 1:length(losses), losses; markershape=:circle,
        -         markersize=12, markeralpha=0.25, strokewidth=2)
        - 
        -     fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=450 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAOECAIAAAA+D1+tAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeXieZZ03/PPO0mxd0ibdKHRJSitIiwIisusgso7KoIzo+Lw6CI6vCDwoHq96PIjH6Ay8UnF0nBHFAR58XYbnkE0KOjAj0EGhIFIRK01a0pZuSZq22bf7/SOYlua62jRNrnv7fP7KfZ5X7utXuEnz5Tyv35lKp9MBAACAwlOU6QIAAADIDIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAAqUQAgAAFCgBEIAAIACJRACAAAUKIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAAqUQAgAAFCgBEIAAIACJRACAAAUKIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAAqUQAgAAFCgBEIAAIACJRACAAAUKIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAApUSaYLYIxSqVSmSwAAACZcOp2euDe3QggAAFCgrBDmtgn9vwVk3Pbt27u7u2fNmlVeXp7pWshJbW1tu3fvrq6unjp1aqZrISd1dHS0tLRUVVXV1NRkuhZyUm9v79atW0tLS+fOnZvpWshVTU1NIYT58+dnupDMSGBXoBVCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQJZkugBzW39//wgsvbNmypbOzc9q0afX19UcffXSmiwIAAEZLIGQsVq1addtttz3yyCPt7e37js+bN+
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - begin
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle,
        -         markeralpha=0.25, alpha=0.5, strokewidth=2, markersize=12)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle,
        -         markeralpha=0.25, alpha=0.5, strokewidth=2, markersize=12)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(ax, tsteps, waveform_nn_trained; markershape=:circle,
        -         markeralpha=0.25, alpha=0.5, strokewidth=2, markersize=12)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=450 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAOECAIAAAA+D1+tAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdd3wUdfoH8Gdmtm96TyChh96RXgRBFBCxnlIs5ynYT9Tzd6ecZ4WTs+Gp2D0VUVGa6HGICILSIfSWQEJ6SE+2z8z398cmM5NkKQrZ3Ww+79e9Xved2Znsc6+9hHn2+3yfL8cYIwAAAAAAAGh9+EAHAAAAAAAAAIGBhBAAAAAAAKCVQkIIAAAAAADQSiEhBAAAAAAAaKWQEAIAAAAAALRSSAgBAAAAAABaKSSEAAAAAAAArRQSQgAAAAAAgFYKCSEAAAAAAEArhYQQAAAAAACglUJCCAAAAAAA0EohIQQAAAAAAGilkBACAAAAAAC0UkgIAQAAAAAAWikkhAAAAAAAAK0UEkIAAAAAAIBWCgkhAAAAAABAK4WEEAAAAAAAoJVCQggAAAAAANBKISEEAAAAAABopZAQAgAAAAAAtFJICAEAAAAAAFopJIQAAAAAAACtFBJCAAAAAACAVgoJIQAAAAAAQCuFhBAAAAAAAKCVQkIIAAAAAADQSiEhBAAAAAAAaKWQEAIAAAAAALRSSAgBAAAAAABaKV2gAwA/4Tgu0CEAAAAAAMBvxhhrvh+OGUIAAAAAAIBWCjOErUuzfrtwIWw2W1lZmdVqjY2NDWwkcDFcLldxcbHRaExMTAx0LPD7iaJYUFCg0+lSUlICHQtclNOnTxNRWlpaoAOBi1JQUCCKYkpKik6Hx7MWrLi42OVyJSYmGo3GQMcCv19ZWZnNZouNjbVarYGNxA9VfpghBAAAAAAAaKWQEAIAAAAAALRSSAgBAAAAAABaKSSEAAAAAAAArRQSQgAAAAAAgFYKCSEAAAAAAEArhYQQAAAAAACglUJCCAAAAA
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-16/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.4
        - NVIDIA driver 550.54.14
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+550.54.14
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 2 devices:
        -   0: Quadro RTX 5000 (sm_75, 14.491 GiB / 16.000 GiB available)
        -   1: Quadro RTX 5000 (sm_75, 15.729 GiB / 16.000 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
